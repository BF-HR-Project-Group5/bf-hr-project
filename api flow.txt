First time registering/viewing webpage

Receives invite email, Register page {
	=> /user/register/{hexToken (from route param)} (POST)
		body = {username, email, password}
		(creates user with {username, email, password})
		(now logged in)
}

log in page, when coming back {
	=> /user/login (POST)
		body = {username?, email?, password}
		(username and/or email? + password)
}

requires AUTH (req.user):

Sends you to Onboarding Application page {
	(fill out application and submit first documents) {
		=> /document/create (POST) (create)
		if s3 happens on frontend:
			body = {
				link, 
				type
			}
		if s3 happens on backend:
			body = {
				document, 
				type
			}
			(uploads a document, i.e. work auth and/or license)
			
		=> /profile/create (after document is uploaded)
			body = {
				ssn: number,
				dateOfBirth: Date,
				gender: string: 'MALE' | 'FEMALE' | 'NO_RESPONSE',
				photo?: file? if sending file from backend,
				address: {
					line1: string,
					line2: string,
					city: string,
					state: string,
					zipcode: string,
				},
				workAuth: {
					title: string ('CITIZEN' | 'GREEN_CARD' | 'VISA'),
					startDate?: Date,
					endDate?: Date,
					daysRemaining?: number,
				},
				car: {
					make: string,
					model: string,
					color: string,
				},
				license: {
					number: string,
					expiration: Date,
					document: file? if sending file from backend,
				},
				phone: {
					mobile: number? string?
					work?: number? string?
				},
				document?: file? if sending file from backend, if workAuth is not 'CITIZEN' | 'GREEN_CARD',
				emergencyContacts: [
					{
						name: {
							first: string,
							last: string,
							middle?: string,
						},
						phone: number? string?
						email: string,
						relationship: string,
					}
				],
			}
			(creates a profile, with ALL the user data that they submit)
	}

	(once submitted, show review status, prevent editing unless REJECTED) {
		=> /profile (GET)
			(after profile is saved/uploaded)
			(get the profile, feedback, documents?)
	}
}


Can go to Personal Info page {
		=> /profile/update (PUT)
			body = {
				name: {
					first?: string,
					last?: string,
					middle?: string,
					preferred?: string,
				},
				ssn?: number,
				dateOfBirth?: Date,
				gender?: string: 'MALE' | 'FEMALE' | 'NO_RESPONSE',
				photo?: file,
				address?: {
					line1?: string,
					line2?: string,
					city?: string,
					state?: string,
					zipcode?: string,
				},
				dateOfBirth?: Date,
				workAuth?: {
					title?: string ('CITIZEN' | 'GREEN_CARD' | 'VISA'),
					startDate?: Date,
					endDate?: Date,
					daysRemaining?: number,
				},
				car?: {
					make?: string,
					model?: string,
					color?: string,
				},
				license?: {
					number?: string,
					expiration?: Date,
					document?: file? if sending file from backend
				},
				phone?: {
					mobile?: number? string?
					work?: number? string?
				},
				document?: file? if sending file from backend, if workAuth is not 'CITIZEN' | 'GREEN_CARD',
				emergencyContacts?: [
					{
						name?: {
							first?: string,
							last?: string,
							middle?: string,
						},
						phone?: number? string?
						email?: string,
						relationship?: string,
					}
				],
			}
			(can update parts of the profile created earlier)

		=> /document (GET)
			(get all documents from the logged-in user, display with preview and download links)
}


Visa Status Management page {
		=> /profile/nextStep ? (GET) ?? 
			(get profile status i.e. all documents ACCEPTED, or get next document? get all document statuses for this profile???)

	(need to be able to add next document if needed:)
		(=> /document/create (POST) (duplicate, see onboarding application page))
}


Housing page: {
	=> /house (GET)
		(get details of the house the user is in)
		(also gets facilityReports of that house, etc.)

	=> /report/create (POST)
		(create a report for the house the user is in)
		body = {
			
		}

	=> /report/{report._id}/edit (PUT)
		(edit the base report)
		body = {
			
		}

	=> /report/{report._id}/comment (POST)
		(add comment to the given report)
		body = {
			
		}

	=> /comment/{comment._id}/edit (PUT)
		(edit particular comment from the user?)
		body = {
			
		}
}






HR users:

requires auth, authHr
Employee Profiles Page: {
	=> /profiles/all (GET) 
		(get all users, and populate profiles, and send everything)
		(get each profile "summary")

	Link to their profile page
	=> /profiles/${user._id} (GET)
		(get one profile)
		(using user._id rather than profile._id because User schema is the base)

	=> /profiles?search="some name search" (GET)
		(return ALL user profiles filtered by search query)
}


Visa Status Management page: {
	=> /profiles/visa (GET)
		(get all user profiles with visa status)

	=> /profiles/visa?search="some name search" (GET)
		(return visa status user profiles filtered by query)
		(can filter IN PROGRESS vs ALL on the client side ??)

	=> /profiles/${user._id}/sendReminder (GET)
		(send a reminder to that user._id of their next step)

	=> /documents/${document._id}/approve (GET)
		(tell server to approve the document._id)

	=> /documents/${document._id}/reject (POST)
		body = {
			feedback: string
		}
}




Hiring Management Page:{
	(onboarding application review) {
		=> /profiles/all (GET) (duplicate)
			(get all profiles, display 3 tabs for the different statuses)
			(PENDING | REJECTED | APPROVED)
			(shows a summary by default)
			(client-side filter by status)

		=> /profiles/${user._id} (GET)
			(for opening the profile in a new tab)
	}

	(registration tokens) {
		=> /invites (GET)
			(get all invites)

		=> /invites/send (POST) 
			(send an invite with the data)
			body = {
				email: string, 
				name: {
					first: string, 
					last: string, 
					middle?: string, 
					preferred?: string,
				}
			}
	}
}

Housing Management Page: {
	=> /houses/all (GET)

	=> /houses/{house._id} (GET)
		(get house, populate facility reports, populate employees/roommates)

	=> /houses/create (POST)
		body = {

		}
	
	=> /houses/{house._id} (PUT)
		body = {

		}

	=> /houses/{house._id} (DELETE)

	=> /report/{facilityReport._id} (PUT)
		(changing the status)
		(edit the report)
		body = {
			
		}

	=> /report/:facilityId/comments (GET)
		(gets the comments from this report)

	=> /report/:facilityId/comments (POST)
		body = {

		}

	=> /comments/{comment._id} (PUT)
		(edit the comment)
		body = {

		}

	=> /comments/{comment._id} (DELETE)
	(delete a comment)
}